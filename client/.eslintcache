[{"/mnt/c/Applications/crud_MERN/client/src/index.tsx":"1","/mnt/c/Applications/crud_MERN/client/src/reportWebVitals.ts":"2","/mnt/c/Applications/crud_MERN/client/src/App.tsx":"3","/mnt/c/Applications/crud_MERN/client/src/components/User/Users.tsx":"4","/mnt/c/Applications/crud_MERN/client/src/components/User/UserItem.tsx":"5","/mnt/c/Applications/crud_MERN/client/src/components/User/userForm.tsx":"6","/mnt/c/Applications/crud_MERN/client/src/components/User/UserForm.tsx":"7","/mnt/c/Applications/crud_MERN/client/src/components/User/UserAPI.tsx":"8"},{"size":500,"mtime":1611667919338,"results":"9","hashOfConfig":"10"},{"size":425,"mtime":1611667919340,"results":"11","hashOfConfig":"10"},{"size":971,"mtime":1613384534732,"results":"12","hashOfConfig":"10"},{"size":2990,"mtime":1613480185893,"results":"13","hashOfConfig":"10"},{"size":4749,"mtime":1613471927406,"results":"14","hashOfConfig":"10"},{"size":3346,"mtime":1612123737005,"results":"15","hashOfConfig":"10"},{"size":10117,"mtime":1614438784595,"results":"16","hashOfConfig":"10"},{"size":1723,"mtime":1613842847110,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"2748jo",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"20"},"/mnt/c/Applications/crud_MERN/client/src/index.tsx",[],["38","39"],"/mnt/c/Applications/crud_MERN/client/src/reportWebVitals.ts",[],"/mnt/c/Applications/crud_MERN/client/src/App.tsx",[],"/mnt/c/Applications/crud_MERN/client/src/components/User/Users.tsx",["40","41"],"import { useEffect, useState } from 'react'\nimport { IUser } from '../../interfaces/types'\nimport \"./user.css\"\nimport UserItem from './UserItem'\nimport { getAllUsers, updateUser, deleteUser } from './UserAPI'\n\ntype UserProps = {\n  users: Array<IUser>,\n  setUsers: React.Dispatch<React.SetStateAction<IUser[]>>\n}\n\nexport default function Users(\n  { users, setUsers }: UserProps) {\n  // const [currentlyEditingIndex, setEditingIndex] = useState<number>(-1);\n\n  // const updateUserInfo = (e: any) => {\n  //   let userIndex: number = e.target.dataset[\"userindex\"];\n  //   let userattribute: keyof IUser = e.target.dataset[\"userattribute\"]\n  //   let newArr = [...users];\n  //   newArr[userIndex][userattribute] = e.target.value; // replace e.target.value with whatever you want to change it to\n  //   setUsers(newArr)\n  // }\n\n  const saveUser = (e: any, updatedUser: IUser) => {\n    let userIndex: number = e.target.dataset[\"userindex\"];\n    let _id = users[userIndex]._id ? users[userIndex]._id : undefined;\n\n    if (_id !== undefined) {\n      updateUser(_id, updatedUser)\n        .then((updatedUser) => {\n          let newUsersList: IUser[]\n          newUsersList = [...users]\n          newUsersList.splice(userIndex, 1, updatedUser)\n          setUsers(newUsersList);\n        }).catch(err => {\n          console.error(\"failed to update user\");\n          console.error(err)\n          alert(\"Could not update user\")\n        })\n      // .finally(() => {\n      //   // setEditingIndex(-1)\n      // })\n    } else {\n      alert(\"Invalid user selected\")\n    }\n  }\n\n  // const startEditing = (e: any) => {\n  //   console.log(e.target.dataset[\"userindex\"])\n\n  //   let userIndex: number = e.target.dataset[\"userindex\"];\n  //   setEditingIndex(userIndex)\n  // }\n\n  const removeUser = (e: any) => {\n    // console.log(e.target.dataset[\"userindex\"])\n\n    let userIndex: number = e.target.dataset[\"userindex\"];\n    let _id = users[userIndex]._id ? users[userIndex]._id : undefined;\n    if (_id !== undefined) {\n      deleteUser(_id)\n        .then(() => {\n          let newUsersList: IUser[]\n          newUsersList = [...users]\n          newUsersList.splice(userIndex, 1);\n          setUsers(newUsersList);\n        }).catch(err => {\n          console.error(\"failed to delete user\");\n          console.error(err)\n          alert(\"Could not delete user\")\n        })\n    } else {\n      alert(\"Invalid user selected\")\n    }\n  }\n\n  useEffect(() => {\n    getAllUsers()\n      .then((res: IUser[]) => {\n        setUsers(res);\n      })\n      .catch(err => {\n        console.error(\"failed to add user\");\n        console.error(err)\n      })\n\n  }, [])\n\n  return (\n    <table>\n      <tbody>\n        {users?.map((user, i) =>\n          <UserItem key={i} userindex={i} user={user}\n            // currentlyEditingIndex={currentlyEditingIndex} updateUserInfo={updateUserInfo} startEditing={startEditing} \n            saveUser={saveUser}\n            removeUser={removeUser} />\n        )}\n      </tbody>\n    </table>\n  );\n\n}\n\n","/mnt/c/Applications/crud_MERN/client/src/components/User/UserItem.tsx",["42"],"import { useEffect, useState } from 'react';\nimport { IUser } from '../../interfaces/types'\ntype UserProps = {\n    userindex: number,\n    user: IUser,\n    // currentlyEditingIndex: number,\n    // updateUserInfo: React.ChangeEventHandler<HTMLTextAreaElement>,\n    // startEditing: React.MouseEventHandler<HTMLButtonElement>,\n    saveUser(e: React.MouseEvent<HTMLButtonElement, MouseEvent>, updatedUser: IUser): void,\n    removeUser: React.MouseEventHandler<HTMLButtonElement>\n};\n\nexport default function UserItem({\n    userindex, user,\n    // currentlyEditingIndex, updateUserInfo, startEditing,\n    saveUser, removeUser }: UserProps) {\n\n    const getDisplayName = (firstName: string, lastName: string) => {\n        return `${lastName}, ${firstName}`\n    }\n\n    // const saveUser = (e: any) => {\n    //     // let userIndex: number = e.target.dataset[\"userindex\"];\n    //     let _id = localUser._id ? localUser._id : undefined;\n    //     // let newUsersList: IUser[]\n\n    //     if (_id !== undefined) {\n    //         updateUser(_id, localUser)\n    //             .then((updatedUser) => {\n    //                 newUsersList = [...users]\n    //                 newUsersList.splice(userIndex, 1, updatedUser)\n    //                 setUsers(newUsersList);\n    //             }).catch(err => {\n    //                 console.error(\"failed to update user\");\n    //                 console.error(err)\n    //             })\n    //         // .finally(() => {\n    //         //   // setEditingIndex(-1)\n    //         // })\n    //     } else {\n    //         alert(\"Invalid user selected\")\n    //     }\n    // }\n\n    // let localUser: (IUser) = user\n\n    const [currentlyEditing, setCurrentlyEditing] = useState<boolean>(false)\n\n    const [localUser, setLocalUser] = useState<IUser>(user)\n    //Always sync localUser with user props\n    useEffect(() => {\n        if (user !== localUser) { ///possible equality issue, change comparison to byID (how did it even work in the first place?!)\n            console.log(\"User prop changed. Updating local user\")\n            setLocalUser(user)\n        } else {\n            console.log(\"User prop changed. local user remains the same\")\n        }\n    }, [user])\n\n    const startEditing = (e: any) => {\n        setCurrentlyEditing(true);\n    }\n    const updateUserInfo = (e: any) => {\n        if (!localUser) {\n            alert(\"Invalid User. Can't update user info\")\n            return\n        }\n        let index: keyof IUser = e.target.dataset[\"userattribute\"]\n        let updatedLocalUser = { ...localUser }\n        updatedLocalUser[index] = e.target.value\n        setLocalUser(updatedLocalUser)\n    }\n\n    return (\n        <tr>\n            <td>\n                {currentlyEditing ?\n                    <span>\n                        <textarea\n                            name=\"firstName\"\n                            value={localUser.firstName}\n                            data-userindex={userindex}\n                            data-userattribute=\"firstName\"\n                            onChange={updateUserInfo}>\n                        </textarea><br />\n                        <textarea\n                            name=\"lastName\"\n                            value={localUser.lastName}\n                            data-userindex={userindex}\n                            data-userattribute=\"lastName\"\n                            onChange={updateUserInfo}>\n                        </textarea>\n                    </span>\n                    :\n                    getDisplayName(user.firstName, user.lastName)\n                }\n            </td>\n            <td>\n                {currentlyEditing ?\n                    <span><textarea\n                        name=\"email\"\n                        value={localUser.email}\n                        data-userindex={userindex}\n                        data-userattribute=\"email\"\n                        onChange={updateUserInfo}></textarea><br /></span>\n                    :\n                    user.email\n                }\n            </td>\n            <td>\n                {currentlyEditing ?\n                    <span>\n                        <button data-userindex={userindex} onClick={(e) => { setCurrentlyEditing(false); saveUser(e, localUser) }}>Save</button>\n                        <button data-userindex={userindex} onClick={(e) => { setCurrentlyEditing(false) }}>Cancel</button>\n                    </span>\n                    :\n                    <button data-userindex={userindex} onClick={startEditing}>Edit</button>\n                }\n                <button data-userindex={userindex} onClick={removeUser}>Delete</button>\n            </td>\n        </tr >\n\n        // <li className=\"userItem\">{getDisplayName(user.firstName, user.lastName)}</li>\n    )\n}\n","/mnt/c/Applications/crud_MERN/client/src/components/User/userForm.tsx",[],"/mnt/c/Applications/crud_MERN/client/src/components/User/UserForm.tsx",[],"/mnt/c/Applications/crud_MERN/client/src/components/User/UserAPI.tsx",["43"],"\nimport axios from 'axios';\nimport { isConstructorDeclaration } from 'typescript';\nimport { IUser } from '../../interfaces/types';\n\nexport const getAllUsers = () => {\n    return new Promise<IUser[]>((resolve, reject) => {\n        axios.get('http://localhost:8000/users')\n            .then(response => {\n                return resolve(response.data)\n            }).catch(err => {\n                return reject(err)\n            })\n    })\n}\n\nexport const addUser = (userData: IUser) => {\n    return new Promise<IUser>((resolve, reject) => {\n        axios.post(\"http://localhost:8000/users\", userData)\n            .then(response => {\n                return resolve(response.data)\n            }).catch(err => {\n                // console.error(\"UserAPI | addUser\")\n                // console.error(err)\n                if (err.response) {\n                    let message = Object.values(err.response.data)[0];\n                    return reject(message);\n                }\n                return reject(err)\n            })\n    })\n}\nexport const updateUser = (_userId: string, updatedUser: IUser) => {\n    return new Promise<IUser>((resolve, reject) => {\n        axios.patch(`http://localhost:8000/users/${_userId}`, updatedUser)\n            .then(response => {\n                return resolve(response.data)\n            }).catch(err => {\n                return reject(err)\n            })\n    })\n}\n\nexport const deleteUser = (_userId: string) => {\n    return new Promise<IUser>((resolve, reject) => {\n        axios.delete(`http://localhost:8000/users/${_userId}`)\n            .then(response => {\n                return resolve(response.data)\n            }).catch(err => {\n                return reject(err)\n            })\n    })\n\n}",{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":1,"column":21,"nodeType":"50","messageId":"51","endLine":1,"endColumn":29},{"ruleId":"52","severity":1,"message":"53","line":87,"column":6,"nodeType":"54","endLine":87,"endColumn":8,"suggestions":"55"},{"ruleId":"52","severity":1,"message":"56","line":58,"column":8,"nodeType":"54","endLine":58,"endColumn":14,"suggestions":"57"},{"ruleId":"48","severity":1,"message":"58","line":3,"column":10,"nodeType":"50","messageId":"51","endLine":3,"endColumn":34},"no-native-reassign",["59"],"no-negated-in-lhs",["60"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setUsers'. Either include it or remove the dependency array. If 'setUsers' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["61"],"React Hook useEffect has a missing dependency: 'localUser'. Either include it or remove the dependency array.",["62"],"'isConstructorDeclaration' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"63","fix":"64"},{"desc":"65","fix":"66"},"Update the dependencies array to be: [setUsers]",{"range":"67","text":"68"},"Update the dependencies array to be: [localUser, user]",{"range":"69","text":"70"},[2620,2622],"[setUsers]",[2188,2194],"[localUser, user]"]
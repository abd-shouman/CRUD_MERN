[{"/mnt/c/Applications/crud_MERN/client/src/index.tsx":"1","/mnt/c/Applications/crud_MERN/client/src/reportWebVitals.ts":"2","/mnt/c/Applications/crud_MERN/client/src/App.tsx":"3","/mnt/c/Applications/crud_MERN/client/src/components/User/Users.tsx":"4","/mnt/c/Applications/crud_MERN/client/src/components/User/UserItem.tsx":"5","/mnt/c/Applications/crud_MERN/client/src/components/User/userForm.tsx":"6","/mnt/c/Applications/crud_MERN/client/src/components/User/UserForm.tsx":"7","/mnt/c/Applications/crud_MERN/client/src/components/User/UserAPI.tsx":"8","/mnt/c/Applications/crud_MERN/client/src/helpers/SnackbarAlert.tsx":"9"},{"size":500,"mtime":1611667919338,"results":"10","hashOfConfig":"11"},{"size":425,"mtime":1611667919340,"results":"12","hashOfConfig":"11"},{"size":971,"mtime":1613384534732,"results":"13","hashOfConfig":"11"},{"size":11872,"mtime":1616239544099,"results":"14","hashOfConfig":"11"},{"size":4749,"mtime":1613471927406,"results":"15","hashOfConfig":"11"},{"size":3346,"mtime":1612123737005,"results":"16","hashOfConfig":"11"},{"size":11014,"mtime":1614780948410,"results":"17","hashOfConfig":"11"},{"size":1668,"mtime":1615112818965,"results":"18","hashOfConfig":"11"},{"size":1237,"mtime":1614778620281,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"2748jo",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"/mnt/c/Applications/crud_MERN/client/src/index.tsx",[],["41","42"],"/mnt/c/Applications/crud_MERN/client/src/reportWebVitals.ts",[],"/mnt/c/Applications/crud_MERN/client/src/App.tsx",[],"/mnt/c/Applications/crud_MERN/client/src/components/User/Users.tsx",["43","44","45"],"/mnt/c/Applications/crud_MERN/client/src/components/User/UserItem.tsx",["46"],"import { useEffect, useState } from 'react';\nimport { IUser } from '../../interfaces/types'\ntype UserProps = {\n    userindex: number,\n    user: IUser,\n    // currentlyEditingIndex: number,\n    // updateUserInfo: React.ChangeEventHandler<HTMLTextAreaElement>,\n    // startEditing: React.MouseEventHandler<HTMLButtonElement>,\n    saveUser(e: React.MouseEvent<HTMLButtonElement, MouseEvent>, updatedUser: IUser): void,\n    removeUser: React.MouseEventHandler<HTMLButtonElement>\n};\n\nexport default function UserItem({\n    userindex, user,\n    // currentlyEditingIndex, updateUserInfo, startEditing,\n    saveUser, removeUser }: UserProps) {\n\n    const getDisplayName = (firstName: string, lastName: string) => {\n        return `${lastName}, ${firstName}`\n    }\n\n    // const saveUser = (e: any) => {\n    //     // let userIndex: number = e.target.dataset[\"userindex\"];\n    //     let _id = localUser._id ? localUser._id : undefined;\n    //     // let newUsersList: IUser[]\n\n    //     if (_id !== undefined) {\n    //         updateUser(_id, localUser)\n    //             .then((updatedUser) => {\n    //                 newUsersList = [...users]\n    //                 newUsersList.splice(userIndex, 1, updatedUser)\n    //                 setUsers(newUsersList);\n    //             }).catch(err => {\n    //                 console.error(\"failed to update user\");\n    //                 console.error(err)\n    //             })\n    //         // .finally(() => {\n    //         //   // setEditingIndex(-1)\n    //         // })\n    //     } else {\n    //         alert(\"Invalid user selected\")\n    //     }\n    // }\n\n    // let localUser: (IUser) = user\n\n    const [currentlyEditing, setCurrentlyEditing] = useState<boolean>(false)\n\n    const [localUser, setLocalUser] = useState<IUser>(user)\n    //Always sync localUser with user props\n    useEffect(() => {\n        if (user !== localUser) { ///possible equality issue, change comparison to byID (how did it even work in the first place?!)\n            console.log(\"User prop changed. Updating local user\")\n            setLocalUser(user)\n        } else {\n            console.log(\"User prop changed. local user remains the same\")\n        }\n    }, [user])\n\n    const startEditing = (e: any) => {\n        setCurrentlyEditing(true);\n    }\n    const updateUserInfo = (e: any) => {\n        if (!localUser) {\n            alert(\"Invalid User. Can't update user info\")\n            return\n        }\n        let index: keyof IUser = e.target.dataset[\"userattribute\"]\n        let updatedLocalUser = { ...localUser }\n        updatedLocalUser[index] = e.target.value\n        setLocalUser(updatedLocalUser)\n    }\n\n    return (\n        <tr>\n            <td>\n                {currentlyEditing ?\n                    <span>\n                        <textarea\n                            name=\"firstName\"\n                            value={localUser.firstName}\n                            data-userindex={userindex}\n                            data-userattribute=\"firstName\"\n                            onChange={updateUserInfo}>\n                        </textarea><br />\n                        <textarea\n                            name=\"lastName\"\n                            value={localUser.lastName}\n                            data-userindex={userindex}\n                            data-userattribute=\"lastName\"\n                            onChange={updateUserInfo}>\n                        </textarea>\n                    </span>\n                    :\n                    getDisplayName(user.firstName, user.lastName)\n                }\n            </td>\n            <td>\n                {currentlyEditing ?\n                    <span><textarea\n                        name=\"email\"\n                        value={localUser.email}\n                        data-userindex={userindex}\n                        data-userattribute=\"email\"\n                        onChange={updateUserInfo}></textarea><br /></span>\n                    :\n                    user.email\n                }\n            </td>\n            <td>\n                {currentlyEditing ?\n                    <span>\n                        <button data-userindex={userindex} onClick={(e) => { setCurrentlyEditing(false); saveUser(e, localUser) }}>Save</button>\n                        <button data-userindex={userindex} onClick={(e) => { setCurrentlyEditing(false) }}>Cancel</button>\n                    </span>\n                    :\n                    <button data-userindex={userindex} onClick={startEditing}>Edit</button>\n                }\n                <button data-userindex={userindex} onClick={removeUser}>Delete</button>\n            </td>\n        </tr >\n\n        // <li className=\"userItem\">{getDisplayName(user.firstName, user.lastName)}</li>\n    )\n}\n",["47","48"],"/mnt/c/Applications/crud_MERN/client/src/components/User/userForm.tsx",[],"/mnt/c/Applications/crud_MERN/client/src/components/User/UserForm.tsx",[],"/mnt/c/Applications/crud_MERN/client/src/components/User/UserAPI.tsx",[],"/mnt/c/Applications/crud_MERN/client/src/helpers/SnackbarAlert.tsx",[],{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":143,"column":6,"nodeType":"55","endLine":143,"endColumn":8,"suggestions":"56"},{"ruleId":"53","severity":1,"message":"57","line":151,"column":6,"nodeType":"55","endLine":151,"endColumn":24,"suggestions":"58"},{"ruleId":"59","severity":1,"message":"60","line":154,"column":9,"nodeType":"61","messageId":"62","endLine":154,"endColumn":18},{"ruleId":"53","severity":1,"message":"63","line":58,"column":8,"nodeType":"55","endLine":58,"endColumn":14,"suggestions":"64"},{"ruleId":"49","replacedBy":"65"},{"ruleId":"51","replacedBy":"66"},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setUsers'. Either include it or remove the dependency array. If 'setUsers' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["69"],"React Hook useEffect has a missing dependency: 'users'. Either include it or remove the dependency array. If 'setLocalEditableUser' needs the current value of 'users', you can also switch to useReducer instead of useState and read 'users' in the reducer.",["70"],"@typescript-eslint/no-unused-vars","'inputList' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'localUser'. Either include it or remove the dependency array.",["71"],["67"],["68"],"no-global-assign","no-unsafe-negation",{"desc":"72","fix":"73"},{"desc":"74","fix":"75"},{"desc":"76","fix":"77"},"Update the dependencies array to be: [setUsers]",{"range":"78","text":"79"},"Update the dependencies array to be: [selectedRowIndex, users]",{"range":"80","text":"81"},"Update the dependencies array to be: [localUser, user]",{"range":"82","text":"83"},[4711,4713],"[setUsers]",[4892,4910],"[selectedRowIndex, users]",[2188,2194],"[localUser, user]"]